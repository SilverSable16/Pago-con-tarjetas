{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aponc\\\\Downloads\\\\Pagos-con-Stripe-main\\\\Pagos-con-Stripe-main\\\\frontend-stripe\\\\src\\\\CheckoutForm.js\",\n  _s = $RefreshSig$();\n// CheckoutForm.js\n/*import React, { useState } from 'react';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\n\nconst CheckoutForm = () => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(null);\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    setError(null);\n    setSuccess(null);\n  \n    const cardElement = elements.getElement(CardElement);\n    \n    // Llamada a tu backend para crear el PaymentIntent\n    const response = await fetch('http://localhost:5000/create-payment-intent', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ amount: 1000 }), // Monto en centavos\n    });\n  \n    const { clientSecret } = await response.json();\n  \n    const { error } = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: cardElement,\n      },\n    });\n  \n    if (error) {\n      setError(error.message);\n    } else {\n      setSuccess('Pago exitoso');\n    }\n  };\n  \n\n  return (\n    <form onSubmit={handleSubmit}>\n      <CardElement />\n      <button type=\"submit\" disabled={!stripe}>\n        Pagar\n      </button>\n      {error && <div>{error}</div>}\n      {success && <div>{success}</div>}\n    </form>\n  );\n};\n\nexport default CheckoutForm;\n*/\n\nimport React, { useState } from 'react';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CheckoutForm = () => {\n  _s();\n  const stripe = useStripe();\n  const elements = useElements();\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(null);\n  const [amount, setAmount] = useState(''); // Estado para almacenar el monto dinámico\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    setError(null);\n    setSuccess(null);\n    const cardElement = elements.getElement(CardElement);\n\n    // Validamos que el monto ingresado sea un número positivo\n    const amountInCents = parseFloat(amount) * 100; // Convertimos a centavos\n\n    if (isNaN(amountInCents) || amountInCents <= 0) {\n      setError('Por favor, ingresa un monto válido.');\n      return;\n    }\n\n    // Llamada a tu backend para crear el PaymentIntent con el monto ingresado\n    const response = await fetch('http://localhost:5000/create-payment-intent', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        amount: amountInCents\n      }) // Monto dinámico en centavos\n    });\n    const {\n      clientSecret\n    } = await response.json();\n    const {\n      error\n    } = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: cardElement\n      }\n    });\n    if (error) {\n      setError(error.message);\n    } else {\n      setSuccess('Pago exitoso');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Monto a pagar (USD):\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: amount,\n        onChange: e => setAmount(e.target.value),\n        placeholder: \"Ingresa el monto\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardElement, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      disabled: !stripe,\n      children: \"Pagar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 17\n    }, this), success && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: success\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n_s(CheckoutForm, \"2kjDO13L8kR9Lcsib7kPGrjeklk=\", false, function () {\n  return [useStripe, useElements];\n});\n_c = CheckoutForm;\nexport default CheckoutForm;\nvar _c;\n$RefreshReg$(_c, \"CheckoutForm\");","map":{"version":3,"names":["React","useState","CardElement","useStripe","useElements","jsxDEV","_jsxDEV","CheckoutForm","_s","stripe","elements","error","setError","success","setSuccess","amount","setAmount","handleSubmit","event","preventDefault","cardElement","getElement","amountInCents","parseFloat","isNaN","response","fetch","method","headers","body","JSON","stringify","clientSecret","json","confirmCardPayment","payment_method","card","message","onSubmit","children","type","value","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","disabled","_c","$RefreshReg$"],"sources":["C:/Users/aponc/Downloads/Pagos-con-Stripe-main/Pagos-con-Stripe-main/frontend-stripe/src/CheckoutForm.js"],"sourcesContent":["// CheckoutForm.js\n/*import React, { useState } from 'react';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\n\nconst CheckoutForm = () => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(null);\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    setError(null);\n    setSuccess(null);\n  \n    const cardElement = elements.getElement(CardElement);\n    \n    // Llamada a tu backend para crear el PaymentIntent\n    const response = await fetch('http://localhost:5000/create-payment-intent', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ amount: 1000 }), // Monto en centavos\n    });\n  \n    const { clientSecret } = await response.json();\n  \n    const { error } = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: cardElement,\n      },\n    });\n  \n    if (error) {\n      setError(error.message);\n    } else {\n      setSuccess('Pago exitoso');\n    }\n  };\n  \n\n  return (\n    <form onSubmit={handleSubmit}>\n      <CardElement />\n      <button type=\"submit\" disabled={!stripe}>\n        Pagar\n      </button>\n      {error && <div>{error}</div>}\n      {success && <div>{success}</div>}\n    </form>\n  );\n};\n\nexport default CheckoutForm;\n*/\n\n\nimport React, { useState } from 'react';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\n\nconst CheckoutForm = () => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(null);\n  const [amount, setAmount] = useState(''); // Estado para almacenar el monto dinámico\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    setError(null);\n    setSuccess(null);\n  \n    const cardElement = elements.getElement(CardElement);\n    \n    // Validamos que el monto ingresado sea un número positivo\n    const amountInCents = parseFloat(amount) * 100; // Convertimos a centavos\n\n    if (isNaN(amountInCents) || amountInCents <= 0) {\n      setError('Por favor, ingresa un monto válido.');\n      return;\n    }\n\n    // Llamada a tu backend para crear el PaymentIntent con el monto ingresado\n    const response = await fetch('http://localhost:5000/create-payment-intent', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ amount: amountInCents }), // Monto dinámico en centavos\n    });\n  \n    const { clientSecret } = await response.json();\n  \n    const { error } = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: cardElement,\n      },\n    });\n  \n    if (error) {\n      setError(error.message);\n    } else {\n      setSuccess('Pago exitoso');\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        Monto a pagar (USD):\n        <input \n          type=\"number\" \n          value={amount} \n          onChange={(e) => setAmount(e.target.value)} \n          placeholder=\"Ingresa el monto\"\n        />\n      </label>\n      <CardElement />\n      <button type=\"submit\" disabled={!stripe}>\n        Pagar\n      </button>\n      {error && <div>{error}</div>}\n      {success && <div>{success}</div>}\n    </form>\n  );\n};\n\nexport default CheckoutForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}